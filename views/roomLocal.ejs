<title>개발 JS</title>
<% include include/header.ejs %>
<a href="/" class="btn_main">메인</a>
<div class="container room">
	<% if (room.start === "대기") { %>
	<h2>생성 시간 : <%= room.name %></h2>
	<ul class="room_info">
		<li>방장 : <%= room.admin %></li>
		<li>참여인원 : <%= room.member.length %>/<%= room.maxMember %></li>
		<li>참가자 :
			<% for (i = 0; i < room.member.length; i++) { %>
			<%= room.member[i] + " " %>
			<% } %>
		</li>
		<li>상태 : <%= room.start %></li>
	</ul>
	<%
		if (user) {
		    var count = 0;
		    for (i = 0; i < room.member.length; i++) {
		        if (room.member[i] === user.user_nick) {
		            count = count + 1;
		        }
		    }
		}
   	%>
		<% if (room.member.length !== room.maxMember && count === 0) { %>
		<form action="/joinRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="참가하기" /></form>
		<% } else if (count !== 0 && room.admin !== user.user_nick) { %>
		<form action="/leaveRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="나가기" /></form>
		<% } if (room.admin === user.user_nick && room.member.length > 1 && room.start !== "진행 중") { %>
		<form action="/startRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="시작" /></form>
		<% } if (room.admin === user.user_nick && room.member.length === 1 && room.start !== "진행 중") { %>
		<form action="/startRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="싱글플레이" /></form>
		<% } if (room.admin === user.user_nick && room.start !== "진행 중") { %>
		<form action="/deleteRoom?roomId=<%= room._id %>" method="post"><input type="submit" value="방폭" /></form>
		<% } %>
	<% } else if (room.select_board === "아직") { %>
	<% for (var i = 0; i < room.player.length; i++) {
            if (room.player[i].nick === user.user_nick) {
                if (room.player[i].board === "아직") { %>
					<div class="select_board">
						<h3>판떼기 고르기</h3>
						<ul>
							<% for (i = 0; i < room.board.length; i++) { %>
							<li class="<%= room.board[i] %>"><a href="#n"><p>Type 
							<strong>
							<% if (i === 0 || i === 5) { %>
								A
							<% } else if (i === 1 || i === 6) { %>
								B
							<% } else if (i === 2 || i === 7) { %>
								C
							<% } else if (i === 3 || i === 8) { %>
								D
							<% } else if (i === 4 || i === 9) { %>
								E
							<% } %>
							</strong>
							<span>
							<% if (i < 5) { %>
								Classic
							<% } else if (i > 4) { %>
								Expert
							<% } %>
							</span></p><img src="/images/<%= room.board[i] %>.jpg" alt="<%= room.board[i] %>" /></a></li>
							<% } %>
							<li class="random_1"><a href="#n"><p>Classic Random (+2 Score)</p><img src="/images/board_random.jpg" alt="?" /></a></li>
							<li class="random_2"><a href="#n"><p>All Random(+3 Score)</p><img src="/images/board_random.jpg" alt="?" /></a></li>
							<li class="random_3"><a href="#n"><p>Expert Random(+4 Score)</p><img src="/images/board_random.jpg" alt="?" /></a></li>
						</ul>
						<form action="/selectBoard?roomId=<%= room._id %>" method="post" class="layer_start"><input type="submit" value="시작" /></form>
					</div>
			<%	}
			}
		}
	%>
	<div>
		<% 
			for (var i = 0; i < room.player.length; i++) {
                var count = 0;
                if (room.player[i].board !== "아직") {
                    count = count + 1;
                    var yet = room.member.length - count;
                    if (count === room.member.length) {
                    	
        %>
        <script>location.href = "";</script>
        <% 
                    }
                }
            }
		%>
		<p class="t_c p_t_20">아직 <%= yet %>명이 판떼기를 안골랐습니다.</p>
		<a href="" class="btn">새로고침</a>
	</div>
	<% } else { %>
	<div class="status">
		<% for (i = 0; i < room.player.length; i++) { %>
			<div class="box">
				<h3 class="player<%= i %>"><%= room.player[i].nick %></h3>
				<ul>
					<li>점수 : <%= room.player[i].score %></li>
				</ul>
			</div>
		<% } %>
		<ul>
			<li>라운드 : <%= room.round %><li>
			<li>남은 엔진 : <% for (var i = 0; i < room.player[0].rest_engine; i++) { %><span class="ball"><%= i+1 %></span><% } %><li>
		</ul>
		<% if (room.round === 11) { %>
			게임 끝
		<% } %>
	</div>
	<div class="board">
		<% if (room.player[0].select_engine === "아직") { %>
		<div class="select_engine">
			<a href="#n"><img src="/images/<%= room.player[0].tile_engine[room.round - 1].name %>.jpg" id="<% if (room.player[0].tile_engine[room.round -1].bonus !== "") %><%= room.player[0].tile_engine[room.round -1].bonus %>" alt="<%= room.player[0].tile_engine[room.round - 1].name %>" /></a>
			<form method="post" class="layer_start"><input type="submit" value="선택" /></form>
		</div>
		<% } %>
		<% for (var k = 0; k < room.member.length; k++) { %>
		<div class="wrap_tile">
			<ul>
				<% for (var m = 0; m < room.player[k].tile_white; m++) { %>
				<li><img src="/images/tile_white.jpg" class="drag tile rotate_0" alt="tile_white" /></li>
				<% } %>
				<% for (var o = 0; o < room.player[k].tile_energy_blue; o++) { %>
				<li><img src="/images/tile_energy_blue.jpg" class="drag tile rotate_0" alt="tile_energy_blue" /></li>
				<% } %>
				<% for (var p = 0; p < room.player[k].tile_energy_green; p++) { %>
				<li><img src="/images/tile_energy_green.jpg" class="drag tile rotate_0" alt="tile_energy_green" /></li>
				<% } %>
				<% for (var q = 0; q < room.player[k].tile_energy_orange; q++) { %>
				<li><img src="/images/tile_energy_orange.jpg" class="drag tile rotate_0" alt="tile_energy_orange" /></li>
				<% } %>
				<% for (var r = 0; r < room.player[k].tile_energy_red; r++) { %>
				<li><img src="/images/tile_energy_red.jpg" class="drag tile rotate_0" alt="tile_energy_red" /></li>
				<% } %>
				<% for (var s = 0; s < room.player[k].tile_option; s++) { %>
				<li><img src="/images/tile_option.jpg" class="drag tile_engine rotate_0" alt="tile_option" /></li>
				<% } %>
				<li>
					<% for (var t = 0; t < room.tile_black; t++) { %>
					<img src="/images/tile_black.jpg" class="drag tile tile_black rotate_0" alt="tile_black" />
					<% } %>
				</li>
				<li>
					<% for (var u = 0; u < room.tile_way_1; u++) { %>
					<img src="/images/tile_way_1.jpg" class="drag tile tile_way_1 rotate_0" alt="tile_way_1" />
					<% } %>
				</li>
				<li>
					<% for (var v = 0; v < room.tile_way_2; v++) { %>
					<img src="/images/tile_way_2.jpg" class="drag tile tile_way_2 rotate_0" alt="tile_way_2" />
					<% } %>
				</li>
				<li>
					<% for (var w = 0; w < room.tile_way_3; w++) { %>
					<img src="/images/tile_way_3.jpg" class="drag tile tile_way_3 rotate_0" alt="tile_way_3" />
					<% } %>
				</li>
				<li>
					<% for (var x = 0; x < room.tile_way_4; x++) { %>
					<img src="/images/tile_way_4.jpg" class="drag tile tile_way_4 rotate_0" alt="tile_way_4" />
					<% } %>
				</li>
				<li>
					<% for (var y = 0; y < room.tile_way_5; y++) { %>
					<img src="/images/tile_way_5.jpg" class="drag tile tile_way_5 rotate_0" alt="tile_way_5" />
					<% } %>
				</li>
				<li>
					<% for (var z = 0; z < room.tile_way_6; z++) { %>
					<img src="/images/tile_way_6.jpg" class="drag tile tile_way_6 rotate_0" alt="tile_way_6" />
					<% } %>
				</li>
				<% if (room.player[0].select_engine !== "아직") { %>
				<li><img src="/images/<%= room.player[0].tile_engine[room.round - 1].name %>.jpg" class="drag tile_engine selected_engine rotate_0" alt="<%= room.player[0].tile_engine[room.round - 1].name %>" /></li>
				<% } %>
				<% 
					for (var t = 0; t < room.player[0].build.length; t++) {
						if (room.player[0].build[t].tile !== "") { 
				%>
							<li><img src="/images/<%= room.player[0].build[t].tile %>.jpg" class="drag tile saved pos_<%= room.player[0].build[t].row %>_<%= room.player[0].build[t].col %> rotate_<%= room.player[0].build[t].rotate %>" id="<%= room.player[0].build[t].row %>-<%= room.player[0].build[t].col %>" alt="<%= room.player[0].build[t].tile %>" /></li>
				<% 		}
					}
				%>
			</ul>
		</div>
		<div class="board_tile"></div>
		<h3><%= room.member[k] %><% var board = room.player[k].board.replace('board_', 'Type ').replace('_', ' ').toUpperCase(); %>(<%= board %>)</h3>
		<table class="<%= room.player[0].board %>">
			<% for (var i = 1; i <= 10; i++) { %>
			<tr>
				<% for (var j = 1; j <= 10; j++) { %>
				<td id="td_<%= i %>_<%= j %>">
					<span><%= i %>-<%= j %></span>
				</td>
				<% } %>
			</tr>
			<% } %>
		</table>
		<% if (room.player[0].select_engine !== "아직") { %>
		<form method="post"><input type="submit" value="배치완료" class="btn complete" /></form>
		<form action="/giveUp?roomId=<%= room._id %>" method="post"><input type="submit" value="포기하기" class="btn" /></form>
		<% } %>
	</div>
	<% } %>
	<div class="layer_action">
		<span></span>
		<p></p>
		<a href="#n" class="cancel">취소</a>
	</div>
<% } %>
</div>
<script src="/js/jquery.event.drag-2.2.js"></script>
<script src="/js/jquery.event.drop-2.2.js"></script>
<script>
	$(function() {
		$(".select_board a").click(function(e) {
			e.preventDefault();
			$(".select_board a").removeClass("on");
			$(this).addClass("on");
			$(".layer_start").fadeIn(200);
			$(".layer_start").css({"top":$(this).offset().top + 73, "left":$(this).offset().left + 50}, 100);
			$(".layer_start").attr("action","/selectBoard?roomId=<%= room._id %>&board=" + $(this).parent().attr("class"));
		});
		$(".select_engine a").click(function(e) {
			e.preventDefault();
			$(".layer_start").fadeIn(200);
			$(".layer_start").css({"top":$(this).offset().top - 95, "left":$(this).offset().left - 480}, 100);
			$(".layer_start").attr("action","/selectEngine?roomId=<%= room._id %>&engine=" + $(this).find("img").attr("alt") + "&id=" + $(this).find("img").attr("id"));
		});
		var posTop = 307;
		var posLeft = 20;
		var posValue = 70;
		$(".drag").drag(function(ev, dd) {
			$(this).css({
				top: Math.round( dd.offsetY / posValue ) * posValue + 27,
				left: Math.round( dd.offsetX / posValue ) * posValue + 20
			});
		});
		$(".drag").drop(function(ev, dd) {
			$(this).attr("id", "");
			var x = ((parseInt($(this).css("top")) - posTop) / posValue + 1);
			var y = ((parseInt($(this).css("left")) - posLeft) / posValue + 1);
			if (x > 0 && x < 11 && y > 0 && y < 11) {
				$(this).attr("id", (x + "@" + y));
			}
		});
		if ($(".saved").length > 0) {
			for (var i = 0; i < $(".saved").length; i++) {
				$(".saved").eq(i).css({
					top: posValue * ($(".saved").eq(i).attr("class").split('_')[1] - 1) + posTop,
					left: posValue * ($(".saved").eq(i).attr("class").split('_')[2].split(' ')[0] - 1) + posLeft
				});
				if ($(".saved").eq(i).attr("alt").split("_")[0] + "_" + $(".saved").eq(i).attr("alt").split("_")[1] === "tile_engine") {
					$(".saved").eq(i).removeClass("tile").addClass("tile_engine");
				}
			}
			$(".saved").fadeIn();
		}
		$(".drag").dblclick(function() {
			if (!$(this).hasClass("rotate_1") && !$(this).hasClass("rotate_2") && !$(this).hasClass("rotate_3")) {
				$(this).addClass("rotate_1").removeClass("rotate_0");
			} else if ($(this).hasClass("rotate_1")) {
				$(this).addClass("rotate_2");
				$(this).removeClass("rotate_1");
			} else if ($(this).hasClass("rotate_2")) {
				$(this).addClass("rotate_3");
				$(this).removeClass("rotate_2");
			} else if ($(this).hasClass("rotate_3")) {
				$(this).removeClass("rotate_3").addClass("rotate_0");
			}
		});
		$(".drag").drop(function(ev, dd) {
			$(".board td").attr("class", "");
			$(".board td p").remove();
		});
		$(".complete").click(function(e) {
			e.preventDefault();
			checkTile();
			// var complete = new Array();
			// for (var i = 0; i < $(".wrap_tile img").length; i++) {
			// 	if ($(".wrap_tile img")[i].id) {
			// 		if ($(".wrap_tile img").eq(i).hasClass("saved")) {
			// 			complete.push({ name: $(".wrap_tile img")[i].alt, row: parseInt($(".wrap_tile img")[i].id.split("@")[0]), col: parseInt($(".wrap_tile img")[i].id.split("@")[1]), rotate: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), new: "no" });
			// 		} else {
			// 			complete.push({ name: $(".wrap_tile img")[i].alt, row: parseInt($(".wrap_tile img")[i].id.split("@")[0]), col: parseInt($(".wrap_tile img")[i].id.split("@")[1]), rotate: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), new: "yes" });
			// 		}
			// 	}
			// }
			// if (complete.length > 0) {
			// 	$.post("/ajaxSaveTile?roomId=<%= room._id %>", { "complete": complete }, function(data) {
			// 		if (data.result === "성공") {
			// 			alert("배치 완료! " + data.score + "점 획득");
			// 			location.reload();
			// 		} else {
			// 			//alert(data.result);
			// 			console.log(data.needTile);
			// 			for (var i = 0; i < data.needTile.length; i++) {
			// 				var row = data.needTile[i].row;
			// 				var col = data.needTile[i].col;
			// 				var color = data.needTile[i].type.split("_")[1];
			// 				$(".board #td_" + row + "_" + col).addClass(color);
			// 				if (data.needTile[i].type === "black") {
			// 					$(".board #td_" + row + "_" + col).addClass("black");
			// 				}
			// 			}
			// 			$(".drag").drop(function(ev, dd) {
			// 				$(".board td").attr("class", "");
			// 			});
			// 		}
			// 	}, "json");	
			// } else {
			// 	alert("에너지가 필요합니다.");
			// }
		});
		function match(complete, needTile, energyTile, result) {
			console.log("result는 match시작 할 때 ", result);
			var energyTileRow, energyTileCol, energyTileRotate, energyTileType, energyTileDirection;
			for (var m = 0; m < complete.length; m++) {
		        var row = complete[m].row;
		        var col = complete[m].col;
		        var rotate = complete[m].rotate;
		        var name = complete[m].name;
		        // console.log("test111", needTile.length);
		        for (var n = 0; n < energyTile.length; n++) {
		            energyTileRow = energyTile[n].row;
		            energyTileCol = energyTile[n].col;
		            energyTileRotate = energyTile[n].rotate;
		            energyTileType = energyTile[n].type;
		            energyTileDirection = energyTile[n].direction;
		            energyTileInputOrOutput = energyTile[n].type.split("_")[2];
		            //필요한 타일의 row 값과 col 값을 구해서 유저가 던진 데이터와 비교 함 
		            //위치값 매칭이 됐다면 그게 충족되는 값인지 체크
		            if (energyTileRow === row && energyTileCol === col) {
		                if (name === "tile_white") {
		                    if (energyTileInputOrOutput === "output" && energyTileRotate === rotate) {
		                        console.log("화이트 타일 result 증가", result);
		                    }
		                } else if (name === "tile_black") {
		                    if (energyTileType === "black" && energyTileRotate === rotate) {
		                        console.log("블랙 타일 result 증가", result);
		                    }
		                } else if (name === "tile_way_1") {
		            		console.log("energyTile.direction", energyTileDirection);
		            		if (rotate === energyTileDirection) {
		                		if (energyTileDirection === 0) {
		                            energyTile[n].row --;
		                        } else if (energyTileDirection === 1) {
		                            energyTile[n].col ++;
		                        } else if (energyTileDirection === 2) {
		                            energyTile[n].row ++;
		                        } else if (energyTileDirection === 3) {
		                            energyTile[n].col --;
		                        }
		                    } else continue;
		                } else if (name === "tile_way_2") {
		                	if (energyTileDirection === 0) {
	                            if (rotate === 2) {
	                        		energyTile[n].direction = 1;
	                            	energyTile[n].col ++;
	                        	} else if (rotate === 3) {
	                        		energyTile[n].direction = 3;
	                            	energyTile[n].col --;
	                        	} else continue;
	                        } else if (energyTileDirection === 1) {
	                        	if (rotate === 0) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                        	} else if (rotate === 3) {
	                        		energyTile[n].direction = 2;
	                            	energyTile[n].row ++;
	                        	} else continue;
	                        } else if (energyTileDirection === 2) {
	                            if (rotate === 0) {
	                        		energyTile[n].direction = 3;
	                            	energyTile[n].col --;
	                        	} else if (rotate === 1) {
	                        		energyTile[n].direction = 1;
	                            	energyTile[n].col ++;
	                        	} else continue;
	                        } else if (energyTileDirection === 3) {
	                            if (rotate === 1) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                        	} else if (rotate === 2) {
	                        		energyTile[n].direction = 2;
	                            	energyTile[n].row ++;
	                        	} else continue;
	                        } else continue;
		                } else if (name === "tile_way_3") {
		                	if (energyTileDirection === 0) {
	                            if (rotate === 0) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col + 1, type: energyType, direction: 1
				                    });
	                        	} else if (rotate === 1) {
	                        		energyTile[n].direction = 3;
	                            	energyTile[n].col --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row, col: energyTile[n].col + 2, type: energyType, direction: 1
				                    });
	                        	} else if (rotate === 2) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col - 1, type: energyType, direction: 3
				                    });
	                        	} else continue;
	                        } else if (energyTileDirection === 1) {
	                        	if (rotate === 1) {
	                        		energyTile[n].direction = 1;
	                            	energyTile[n].col ++;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col - 1, type: energyType, direction: 2
				                    });
	                        	} else if (rotate === 2) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 2, col: energyTile[n].col, type: energyType, direction: 2
				                    });
	                        	} else if (rotate === 3) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col + 1, type: energyType, direction: 1
				                    });
	                        	} else continue;
	                        } else if (energyTileDirection === 2) {
	                            if (rotate === 0) {
	                        		energyTile[n].direction = 2;
	                            	energyTile[n].row ++;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row - 1, col: energyTile[n].col + 1, type: energyType, direction: 1
				                    });
	                        	} else if (rotate === 2) {
	                        		energyTile[n].direction = 3;
	                            	energyTile[n].col --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col + 1, type: energyType, direction: 2
				                    });
	                        	} else if (rotate === 3) {
	                        		energyTile[n].direction = 1;
	                            	energyTile[n].col ++;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row, col: energyTile[n].col - 2, type: energyType, direction: 3
				                    });
	                        	} else continue;
	                        } else if (energyTileDirection === 3) {
	                            if (rotate === 0) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 2, col: energyTile[n].col, type: energyType, direction: 2
				                    });
	                        	} else if (rotate === 1) {
	                        		energyTile[n].direction = 3;
	                            	energyTile[n].col --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col + 1, type: energyType, direction: 2
				                    });
	                        	} else if (rotate === 3) {
	                        		energyTile[n].direction = 0;
	                            	energyTile[n].row --;
	                            	energyTile.push({ 
				                    	row: energyTile[n].row + 1, col: energyTile[n].col - 1, type: energyType, direction: 3
				                    });
	                        	} else continue;
	                        } else continue;
		                } else if (name === "tile_way_4") {
                            if (energyTileDirection === 0) {
                        		energyTile[n].direction = 0;
                            	energyTile[n].row --;
                            	energyTile.push({
			                    	row: energyTile[n].row + 1, col: energyTile[n].col + 1, type: energyType, direction: 1
			                    });
			                    energyTile.push({
			                    	row: energyTile[n].row + 1, col: energyTile[n].col - 1, type: energyType, direction: 3
			                    });
                        	} else if (energyTileDirection === 1) {
                        		energyTile[n].direction = 1;
                            	energyTile[n].col ++;
                            	energyTile.push({
			                    	row: energyTile[n].row - 1, col: energyTile[n].col - 1, type: energyType, direction: 0
			                    });
			                    energyTile.push({
			                    	row: energyTile[n].row + 1, col: energyTile[n].col - 1, type: energyType, direction: 2
			                    });
                        	} else if (energyTileDirection === 2) {
                        		energyTile[n].direction = 2;
                            	energyTile[n].row ++;
                            	energyTile.push({
			                    	row: energyTile[n].row - 1, col: energyTile[n].col + 1, type: energyType, direction: 1
			                    });
			                    energyTile.push({
			                    	row: energyTile[n].row - 1, col: energyTile[n].col - 1, type: energyType, direction: 3
			                    });
                        	} else if (energyTileDirection === 3) {
                        		energyTile[n].direction = 3;
                            	energyTile[n].col --;
                            	energyTile.push({
			                    	row: energyTile[n].row - 1, col: energyTile[n].col + 1, type: energyType, direction: 0
			                    });
			                    energyTile.push({
			                    	row: energyTile[n].row + 1, col: energyTile[n].col + 1, type: energyType, direction: 2
			                    });
                        	} else continue;
		                } else if (name === "tile_way_5") {
		                    continue;
		                } else if (name === "tile_way_6") {
		                    continue;
		                } else {
		                	console.log("needTile.length", needTile.length);
		                	for (var i = 0; i < needTile.length; i++ ) {
		                		if (energyTileRow === needTile[i].row && energyTileCol === needTile[i].col && energyTileDirection === needTile[i].direction && energyTileType === needTile[i].type.split("_")[1]) {
			                        console.log("여기 오긴 온거야?", energyTileRow, energyTileCol, needTile[i].row, needTile[i].col, energyTileDirection, needTile[i].direction);
			                		result ++;
			                    }	
		                	}
		                	console.log("result는 증가 했는가1", result);
		                    continue;
		                }
		            }
		            if (energyTileRow === row && energyTileCol === col) {
		            	match(complete, needTile, energyTile, result);
		            	console.log("result는 증가 했는가2", result);
		            }
		        }
		    }
		    console.log("result는 증가 했는가3", result);
		    return result;
		}
		function checkTile() {
			console.log("님 몇번 실행 됨 ")
			var posType = ["top_1", "top_2", "bottom_1", "bottom_2", "left", "right"];
			var needTile = [];
			var posTypeRowNum = [];
	        var posTypeColNum = [];
	        var posTypeDirection = [];
			var tile_engine = [];
			var complete = [];
			var energyTile = [];
			var engineNum, engineAttr, row, col, rotate, needTileRow, needTileCol, needTileRotate, needTileType, needTileInputOrOutput, directionLetter, typeIO;
			var result = 0;
			tile_engine[0] = { name: "tile_engine_0", score: 8, bonus: "", top_1: "", top_2: "", bottom_1: "2_blue_input", bottom_2: "", left: "2_red_input", right: "black" };
	        tile_engine[1] = { name: "tile_engine_1", score: 9, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_green_input", right: "black" };
	        tile_engine[2] = { name: "tile_engine_2", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "3_blue_input", bottom_2: "", left: "2_red_input", right: "2_blue_output" };
	        tile_engine[3] = { name: "tile_engine_3", score: 7, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "1_green_output", left: "1_red_input", right: "" };
	        tile_engine[4] = { name: "tile_engine_4", score: 12, bonus: "", top_1: "", top_2: "", bottom_1: "1_orange_input", bottom_2: "", left: "2_blue_input", right: "" };
	        tile_engine[5] = { name: "tile_engine_5", score: 9, bonus: "", top_1: "1_green_input", top_2: "", bottom_1: "1_red_input", bottom_2: "", left: "1_orange_input", right: "3_blue_output" };
	        tile_engine[6] = { name: "tile_engine_6", score: 8, bonus: "", top_1: "3_blue_input", top_2: "", bottom_1: "1_red_input", bottom_2: "", left: "1_green_input", right: "3_orange_output" };
	        tile_engine[7] = { name: "tile_engine_7", score: 8, bonus: "", top_1: "3_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_orange_input", right: "1_blue_output" };
	        tile_engine[8] = { name: "tile_engine_8", score: 7, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "", right: "black" };
	        tile_engine[9] = { name: "tile_engine_9", score: 7, bonus: "", top_1: "", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "3_green_input", right: "black" };
	        tile_engine[10] = { name: "tile_engine_10", score: 6, bonus: "green", top_1: "2_red_input", top_2: "", bottom_1: "3_green_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[11] = { name: "tile_engine_11", score: 4, bonus: "", top_1: "2_blue_input", top_2: "", bottom_1: "3_green_input", bottom_2: "", left: "", right: "3_red_output" };
	        tile_engine[12] = { name: "tile_engine_12", score: 11, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "2_blue_input", bottom_2: "", left: "1_orange_input", right: "2_green_output" };
	        tile_engine[13] = { name: "tile_engine_13", score: 13, bonus: "", top_1: "1_blue_input", top_2: "", bottom_1: "1_red_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[14] = { name: "tile_engine_14", score: 10, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_blue_input", right: "1_red_output" };
	        tile_engine[15] = { name: "tile_engine_15", score: 5, bonus: "all", top_1: "1_blue_input", top_2: "", bottom_1: "1_orange_input", bottom_2: "", left: "", right: "1_red_output" };
	        tile_engine[16] = { name: "tile_engine_16", score: 7, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "2_red_input", bottom_2: "", left: "", right: "2_green_output" };
	        tile_engine[17] = { name: "tile_engine_17", score: 8, bonus: "", top_1: "2_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_blue_input", right: "2_orange_output" };
	        tile_engine[18] = { name: "tile_engine_18", score: 7, bonus: "orange", top_1: "2_blue_input", top_2: "", bottom_1: "1_green_input", bottom_2: "", left: "2_orange_input", right: "2_red_output" };
	        tile_engine[19] = { name: "tile_engine_19", score: 11, bonus: "", top_1: "", top_2: "", bottom_1: "1_green_input", bottom_2: "", left: "2_red_output", right: "1_blue_output" };
	        tile_engine[20] = { name: "tile_engine_20", score: 9, bonus: "", top_1: "", top_2: "", bottom_1: "2_red_input", bottom_2: "", left: "2_green_input", right: "1_blue_output" };
	        tile_engine[21] = { name: "tile_engine_21", score: 3, bonus: "red", top_1: "", top_2: "1_blue_output", bottom_1: "", bottom_2: "", left: "3_red_input", right: "" };
	        tile_engine[22] = { name: "tile_engine_22", score: 10, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "", bottom_2: "1_green_output", left: "3_orange_input", right: "" };
	        tile_engine[23] = { name: "tile_engine_23", score: 5, bonus: "", top_1: "", top_2: "3_red_output", bottom_1: "2_orange_input", bottom_2: "", left: "2_red_input", right: "" };
	        tile_engine[24] = { name: "tile_engine_24", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "3_blue_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[25] = { name: "tile_engine_25", score: 10, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "", bottom_2: "black", left: "3_red_input", right: "" };
	        tile_engine[26] = { name: "tile_engine_26", score: 5, bonus: "", top_1: "1_blue_input", top_2: "", bottom_1: "", bottom_2: "3_orange_output", left: "", right: "" };
	        tile_engine[27] = { name: "tile_engine_27", score: 6, bonus: "", top_1: "", top_2: "", bottom_1: "1_orange_input", bottom_2: "", left: "3_blue_input", right: "3_green_output" };
	        tile_engine[28] = { name: "tile_engine_28", score: 6, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "2_green_input", right: "black" };
	        tile_engine[29] = { name: "tile_engine_29", score: 7, bonus: "", top_1: "2_green_input", top_2: "", bottom_1: "3_red_input", bottom_2: "", left: "", right: "1_red_output" };
	        tile_engine[30] = { name: "tile_engine_30", score: 4, bonus: "", top_1: "3_green_input", top_2: "", bottom_1: "", bottom_2: "", left: "", right: "1_red_output" };
	        tile_engine[31] = { name: "tile_engine_31", score: 7, bonus: "", top_1: "", top_2: "2_orange_output", bottom_1: "1_orange_input", bottom_2: "", left: "3_green_input", right: "" };
	        tile_engine[32] = { name: "tile_engine_32", score: 6, bonus: "blue", top_1: "3_green_input", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "", right: "1_orange_output" };
	        tile_engine[33] = { name: "tile_engine_33", score: 9, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "", right: "2_orange_output" };
	        tile_engine[34] = { name: "tile_engine_34", score: 1, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "3_orange_input", right: "3_green_output" };
	        tile_engine[35] = { name: "tile_engine_35", score: 10, bonus: "", top_1: "2_blue_input", top_2: "", bottom_1: "2_green_input", bottom_2: "", left: "", right: "1_orange_output" };
	        tile_engine[36] = { name: "tile_engine_36", score: 6, bonus: "", top_1: "", top_2: "", bottom_1: "2_orange_input", bottom_2: "", left: "1_green_input", right: "3_red_output" };
	        tile_engine[37] = { name: "tile_engine_37", score: 11, bonus: "", top_1: "1_green_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_orange_input", right: "black" };
	        tile_engine[38] = { name: "tile_engine_38", score: 9, bonus: "", top_1: "2_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "1_green_input", right: "2_orange_output" };
	        tile_engine[39] = { name: "tile_engine_39", score: 6, bonus: "", top_1: "1_red_input", top_2: "", bottom_1: "", bottom_2: "", left: "1_blue_input", right: "3_green_output" };
	        tile_engine[40] = { name: "tile_engine_40", score: 3, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "3_blue_input", right: "2_red_output" };
	        tile_engine[41] = { name: "tile_engine_41", score: 6, bonus: "", top_1: "", top_2: "2_blue_output", bottom_1: "3_orange_input", bottom_2: "", left: "1_blue_input", right: "" };
	        tile_engine[42] = { name: "tile_engine_42", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "2_orange_input", right: "1_orange_output" };
	        tile_engine[43] = { name: "tile_engine_43", score: 6, bonus: "", top_1: "3_blue_input", top_2: "", bottom_1: "", bottom_2: "", left: "3_red_input", right: "1_red_output" };
	        tile_engine[44] = { name: "tile_engine_44", score: 8, bonus: "", top_1: "2_green_input", top_2: "", bottom_1: "", bottom_2: "1_green_output", left: "2_red_input", right: "" };
	        tile_engine[45] = { name: "tile_engine_45", score: 4, bonus: "", top_1: "", top_2: "2_green_output", bottom_1: "1_green_input", bottom_2: "", left: "", right: "" };
	        tile_engine[46] = { name: "tile_engine_46", score: 7, bonus: "", top_1: "2_orange_input", top_2: "", bottom_1: "", bottom_2: "", left: "2_blue_input", right: "2_green_output" };
	        tile_engine[47] = { name: "tile_engine_47", score: 10, bonus: "", top_1: "", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "2_green_input", right: "2_red_output" };
	        tile_engine[48] = { name: "tile_engine_48", score: 5, bonus: "", top_1: "", top_2: "3_blue_output", bottom_1: "1_orange_input", bottom_2: "", left: "3_red_input", right: "" };
	        tile_engine[49] = { name: "tile_engine_49", score: 4, bonus: "", top_1: "3_green_input", top_2: "", bottom_1: "3_red_input", bottom_2: "", left: "", right: "3_orange_output" };
	        tile_engine[50] = { name: "tile_engine_50", score: 8, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "3_blue_input", bottom_2: "", left: "", right: "black" };
	        tile_engine[51] = { name: "tile_engine_51", score: 2, bonus: "", top_1: "", top_2: "", bottom_1: "", bottom_2: "", left: "2_green_input", right: "3_blue_output" };
	        tile_engine[52] = { name: "tile_engine_52", score: 14, bonus: "", top_1: "1_orange_input", top_2: "", bottom_1: "1_blue_input", bottom_2: "", left: "2_green_input", right: "black" };
	        tile_engine[53] = { name: "tile_engine_53", score: 9, bonus: "", top_1: "3_orange_input", top_2: "", bottom_1: "", bottom_2: "1_blue_output", left: "1_green_input", right: "" };
	        tile_engine[54] = { name: "tile_engine_54", score: 5, bonus: "", top_1: "", top_2: "", bottom_1: "2_orange_input", bottom_2: "", left: "", right: "2_blue_output" };
	        // console.log(tile_engine);
			for (var i = 0; i < $(".wrap_tile img").length; i++) {
				if ($(".wrap_tile img")[i].id) {
					if ($(".wrap_tile img").eq(i).hasClass("saved")) {
						complete.push({ name: $(".wrap_tile img")[i].alt, row: parseInt($(".wrap_tile img")[i].id.split("@")[0]), col: parseInt($(".wrap_tile img")[i].id.split("@")[1]), rotate: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), new: "no" });
					} else {
						complete.push({ name: $(".wrap_tile img")[i].alt, row: parseInt($(".wrap_tile img")[i].id.split("@")[0]), col: parseInt($(".wrap_tile img")[i].id.split("@")[1]), rotate: parseInt($(".wrap_tile img")[i].className.split("rotate_")[1]), new: "yes" });
					}
				}
			}
			for (var j = 0; j < complete.length; j++) {
                if (complete[j].name.split("tile_energy_")[1]) {
                	energyType = complete[j].name.split("tile_energy_")[1];
                	row = complete[j].row;
                    col = complete[j].col;
                    energyTile.push({ 
                    	row: row - 1, col: col, type: energyType, direction: 0 
                    });
                    energyTile.push({ 
                    	row: row, col: col - 1, type: energyType, direction: 3
                    });
                    energyTile.push({ 
                    	row: row, col: col + 1, type: energyType, direction: 1
                    });
                    energyTile.push({ 
                    	row: row + 1 ,col: col, type: energyType, direction: 2
                    });
                } else if (complete[j].name.split("tile_engine_")[1]) {
                    //엔진의 번호를 engineAttr에 담음
                    engineNum = complete[j].name.split("tile_engine_")[1];
                    engineAttr = tile_engine[engineNum];
                    row = complete[j].row;
                    col = complete[j].col;
                    rotate = complete[j].rotate;
                    //항목 : posType = ["top_1", "top_2", "bottom_1", "bottom_2", "left", "right"];
                    if (rotate === 0) {
                        // posTypeColNum = [0, 1, 0, 1, -1, 2];
                        // posTypeRowNum = [-1, -1, 1, 1, 0, 0];
                        posTypeColNum = [0, 1, 0, 1, 0, 1];
                        posTypeRowNum = [0, 0, 0, 0, 0, 0];
                        posTypeDirection = [2, 2, 0, 0, 1, 1];
                    } else if (rotate === 1) {
                        // posTypeColNum = [1, 1, -1, -1, 0, 0];
                        // posTypeRowNum = [0, 1, 0, 1, -1, 2];
                        posTypeColNum = [0, 0, 0, 0, 0, 0];
                        posTypeRowNum = [0, 1, 0, 1, 0, 1];
                        posTypeDirection = [3, 3, 1, 1, 2, 2];
                    } else if (rotate === 2) {
                        // posTypeColNum = [1, 0, 1, 0, 2, -1];
                        // posTypeRowNum = [1, 1, -1, -1, 0, 0];
                        posTypeColNum = [1, 0, 1, 0, 1, 0];
                        posTypeRowNum = [0, 0, 0, 0, 0, 0];
                        posTypeDirection = [0, 0, 2, 2, 3, 3];
                    } else if (rotate === 3) {
                        // posTypeColNum = [-1, -1, 1, 2, 0, 0];
                        // posTypeRowNum = [1, 0, 1, 1, 2, -1];
                        posTypeColNum = [0, 0, 0, 0, 0, 0];
                        posTypeRowNum = [1, 0, 1, 0, 1, 0];
                        posTypeDirection = [1, 1, 3, 3, 0, 0];
                    }
                    for (var i = 0; i < posType.length; i++) {
                        if (engineAttr[posType[i]] !== "") {
                        	typeIO = engineAttr[posType[i]].split("_")[2];
                        	if (typeIO === "output") {
	                        	posTypeDirection[i] = (posTypeDirection[i] + 2) % 4;
	                        }
                            needTile.push({ 
                            	row: row + posTypeRowNum[i],
                            	col: col + posTypeColNum[i],
                            	type: engineAttr[posType[i]],
                            	direction: posTypeDirection[i]
                            });
                        }
                    }
                }
            }

            result = match(complete, needTile, energyTile, result);
		    console.log("최종 result", result);
			if (result === needTile.length && result !== 0) {
				console.log("성공");
			} else {
				console.log("실패");
			}
			for (var i = 0; i < energyTile.length; i++) {
				row = energyTile[i].row;
				col = energyTile[i].col;
                color = energyTile[i].type;
                if (energyTile[i].direction === 0) directionLetter = "↑";
                else if (energyTile[i].direction === 1) directionLetter = "→";
                else if (energyTile[i].direction === 2) directionLetter = "↓";
                else if (energyTile[i].direction === 3) directionLetter = "←";
                else {
                	energyTile[i].direction = "";
                	directionLetter = "";
                }
                $(".board #td_" + row + "_" + col).addClass(color).append("<p>"/* + energyTile[i].direction + "<br />" */+ directionLetter + "</p>");
			}
            console.log("energyTile", energyTile);
            console.log("needTile", needTile);
		}
		$("body").keydown(function (e) {
			if (e.keyCode == 13) {
				$(".board td p").remove();
				checkTile();
			}
		});
	});
</script>
<% include include/footer.ejs %>